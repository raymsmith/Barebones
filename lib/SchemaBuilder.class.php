<?php
// lib/SchemaBuilder.class.php

class SchemaBuilder {
	// Database connection
	protected static $_db;
	// Database name
	protected static $db_name;

	/**
	 * Initialize SchemaBuilder
	 *
	 * @return Exception $e on error
	 */
	public static function init() {
		// set database
		$db = ApplicationDataConnectionPool::get('static');
		if (!$db) {
			SchemaBuilder::send_error("No database connection found", __FUNCTION__);
		}
		SchemaBuilder::$_db = $db;
	}

	/**
	 * Create a file that when called, returns an associative array generated
	 * from the table schema. All generated file are placed in the Schema folder
	 *
	 * @param string $table_name The name of the table
	 *
	 * @return Exception $e on error
	 */
	public static function buildSchemaFromTable($table_name) {
		try {
			// get all table information
			$sql = "SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` ";
			$sql .= "WHERE `TABLE_SCHEMA`='".SchemaBuilder::$db_name."'AND `TABLE_NAME`='".$table_name."' ";
			$result = SchemaBuilder::$_db->query($sql);
			
			$top_msg = "<?php \n/*\n*****AUTOGENERATED FILE*****\n CREATED ON:".date("D M j Y G:i:s")."\n*/\n";
			$bottom_msg = "\n?> ";
			$out = "";
			$key = "";
			// for each column
			while ($result->hasNext()) {
				$row = $result->next();
				$out .= '$schema[\''.$row['COLUMN_NAME'].'\'] = array(\'attributes\'=> array(\'type\'=>\''.$row['DATA_TYPE'].'\', \'is_null\'=>\''.$row['IS_NULLABLE'].'\', ';
				$out .= '\'max_length\'=>\''.$row['CHARACTER_MAXIMUM_LENGTH'].'\', ';
				$out .= '\'column_key\' =>\''.$row['COLUMN_KEY'].'\'';
				$out .= "));\n";
				if ($row['COLUMN_KEY'] == 'PRI') {
					$key = $row['COLUMN_NAME'];
				}
			}
			// add primary key
			$out .= '$schema[\'pri\'] = \''.$key.'\';';
			$out .= "\n";
			// add database name
			$out .= '$schema[\'db_name\'] = \''.SchemaBuilder::$db_name.'\'; ';
			file_put_contents(SCHEMAPATH.$table_name.".schema.php", $top_msg.$out.$bottom_msg);

		} catch(Exception $e) {
			return SchemaBuilder::send_error($e." Error building schema", __FUNCTION__);
		}

	}

	/**
	 * Iterate over the database generate schemas for each table
	 *
	 * @param string $db_name The name of the database
	 *
	 * @return Exception $e on error
	 */
	public static function generateSchemas($db_name) {
		// set database name
		SchemaBuilder::$db_name = $db_name;
		try {

			// check for directory existence
			if (!is_dir(SCHEMAPATH)) {
				mkdir(SCHEMAPATH);
			} else {
				// delete all files in schema directory
                /*
				$files = glob(SCHEMAPATH.'*.schema.php');
				foreach ($files as $file) {
					unlink($file);
				}
                */
			}

			// get all table names in specified database
			$sql = "SHOW TABLES FROM `".SchemaBuilder::$db_name."` ";
			
			$result = SchemaBuilder::$_db->query($sql);
			while ($result->hasNext()) {
				$row = $result->next();
				SchemaBuilder::buildSchemaFromTable($row['Tables_in_'.SchemaBuilder::$db_name]);
			}
			
		} catch(Exception $e) {
			return SchemaBuilder::send_error($e."Error generating schemas", __FUNCTION__);
		}

	}

	/**
	 * Send an error
	 *
	 * @param $message The error message
	 *
	 * @param $function the caller function
	 *
	 * @throws The error message along with the class and function
	 *
	 */
	public static function send_error($message = "", $function) {
		throw new Exception($message." :".__CLASS__."->".$function);
	}

}
?>
